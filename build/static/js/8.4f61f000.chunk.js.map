{"version":3,"sources":["components/http-hooks.js","components/ErrorModal.js","css/Task.module.css","components/Backdrop.js","components/Modal.js","css/NewTaskForm.module.css","components/NewTaskForm.js"],"names":["useHttpClient","useState","isLoading","setIsLoading","error","setError","sendRequest","useCallback","url","a","method","body","headers","fetch","response","json","responseData","ok","Error","mess","message","clearError","ErrorModal","props","onCancel","onClear","header","show","footer","className","classes","edit","onClick","module","exports","Backdrop","ReactDOM","createPortal","document","getElementById","ModalOverlay","content","style","headerClass","onSubmit","event","preventDefault","contentClass","children","footerClass","Modal","Fragment","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","NewTaskForm","auth","useContext","AuthContext","history","useHistory","enteredTask","setEnteredTask","enteredStatus","setEnteredStatus","enteredDescription","setEnteredDescription","submitHandler","process","JSON","stringify","title","description","status","owner","userId","token","push","main","asOverlay","form","req","htmlFor","onChange","target","value","id","type"],"mappings":"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","file":"static/js/8.4f61f000.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState()\r\n    const sendRequest = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\r\n        setIsLoading(true)\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers\r\n            })\r\n            const responseData = await response.json()\r\n            if (!response.ok) {\r\n                throw new Error(responseData.mess)\r\n            }\r\n            setIsLoading(false)\r\n            return responseData\r\n        } catch (err) {\r\n            setError(err.message || \"Something went wrong\")\r\n            setIsLoading(false)\r\n            throw err\r\n        }\r\n\r\n    }, [])\r\n    const clearError = () => {\r\n        setError(null)\r\n    }\r\n\r\n    return { isLoading, error, sendRequest, clearError }\r\n}","import React from 'react';\n\nimport Modal from './Modal';\nimport classes from \"../css/Task.module.css\"\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<button className={classes.edit} onClick={props.onClear}>Okay</button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Task_main__1S7O9\",\"task\":\"Task_task__y_jar\",\"p\":\"Task_p__3_LGx\",\"button\":\"Task_button__2WaKy\",\"edit\":\"Task_edit__1rpTY\",\"delete\":\"Task_delete__1C-mw\",\"cancel\":\"Task_cancel__395EH\",\"values\":\"Task_values__3uKPV\"};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = props => {\r\n    return ReactDOM.createPortal(\r\n        <div className=\"backdrop\" onClick={props.onClick}></div>,\r\n        document.getElementById('backdrop-hook')\r\n    );\r\n};\r\n\r\nexport default Backdrop;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css';\r\n\r\nconst ModalOverlay = props => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form\r\n                onSubmit={\r\n                    props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n                }\r\n            >\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = props => {\r\n    return (\r\n        <React.Fragment>\r\n            {props.show && <Backdrop onClick={props.onCancel} />}\r\n            <CSSTransition\r\n                in={props.show}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                timeout={200}\r\n                classNames=\"modal\"\r\n            >\r\n                <ModalOverlay {...props} />\r\n            </CSSTransition>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"NewTaskForm_main__2EIF6\",\"form\":\"NewTaskForm_form__3f5bB\",\"req\":\"NewTaskForm_req__1x8mb\"};","// import { useState } from \"react\"\r\n// const NewTaskForm = (props) => {\r\n//     const [enteredTask, setEnteredTask] = useState(\"\")\r\n//     const [enteredStatus, setEnteredStatus] = useState(\"\")\r\n//     const [enteredDescription, setEnteredDescription] = useState(\"\")\r\n//     const [enteredCreatedAt, setEnteredCreatedAt] = useState(new Date())\r\n\r\n//     const taskChangeHandler = (event) => {\r\n//         setEnteredTask(event.target.value)\r\n//     }\r\n\r\n//     const statusChangeHandler = (event) => {\r\n//         setEnteredStatus(event.target.value)\r\n//     }\r\n\r\n//     const descriptionChangeHandler = event => {\r\n//         setEnteredDescription(event.target.value)\r\n//     }\r\n\r\n//     const submitHandler = async (event) => {\r\n//         event.preventDefault()\r\n//         const enteredData = {\r\n//             id: \"t4\",\r\n//             title: enteredTask,\r\n//             description: enteredDescription,\r\n//             status: enteredStatus ? enteredStatus : \"Incomplete\",\r\n//             createdAt: enteredCreatedAt,\r\n//             owner: \"u1\"\r\n//         }\r\n//         props.onSaveTaskData(enteredData)\r\n//         setEnteredTask(\"\")\r\n//         setEnteredStatus(\"\")\r\n\r\n//     }\r\n//     return <div>\r\n//         <form onSubmit={submitHandler}>\r\n//             <label htmlFor=\"taskName\">Task Name</label>\r\n//             <input onChange={taskChangeHandler} value={enteredTask} id=\"taskName\" type=\"text\"></input>\r\n//             <label htmlFor=\"description\">Task Description</label>\r\n//             <textarea onChange={descriptionChangeHandler} value={enteredDescription} id=\"description\" type=\"text\"></textarea>\r\n//             <label htmlFor=\"status\">Task Status</label>\r\n//             <select onChange={statusChangeHandler} value={enteredStatus} id=\"status\">\r\n//                 <option value=\"Incomplete\">Incomplete</option>\r\n//                 <option value=\"Completed\">Completed</option>\r\n//                 <option value=\"In Progress\">In Progress</option>\r\n//             </select>\r\n//             <button>Add Task</button>\r\n//             <button type=\"button\" onClick={props.onClose}>Cancel</button>\r\n//         </form>\r\n//     </div>\r\n// }\r\n\r\n// export default NewTaskForm\r\n\r\nimport { useState, useContext } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useHttpClient } from \"./http-hooks\"\r\nimport { AuthContext } from \"./auth-context\"\r\nimport ErrorModal from \"./ErrorModal\"\r\nimport LoadingSpinner from \"./LoadingSpinner\"\r\nimport classes from \"../css/NewTaskForm.module.css\"\r\nconst NewTaskForm = (props) => {\r\n    const auth = useContext(AuthContext)\r\n    const history = useHistory()\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n    const [enteredTask, setEnteredTask] = useState(\"\")\r\n    const [enteredStatus, setEnteredStatus] = useState(\"\")\r\n    const [enteredDescription, setEnteredDescription] = useState(\"\")\r\n\r\n    const taskChangeHandler = (event) => {\r\n        setEnteredTask(event.target.value)\r\n    }\r\n\r\n    const statusChangeHandler = (event) => {\r\n        setEnteredStatus(event.target.value)\r\n    }\r\n\r\n    const descriptionChangeHandler = event => {\r\n        setEnteredDescription(event.target.value)\r\n    }\r\n\r\n    const submitHandler = async (event) => {\r\n        event.preventDefault()\r\n\r\n        try {\r\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + \"/tasks\", \"POST\",\r\n                JSON.stringify({\r\n                    title: enteredTask,\r\n                    description: enteredDescription,\r\n                    status: enteredStatus ? enteredStatus : \"Incomplete\",\r\n                    owner: auth.userId\r\n                }),\r\n                { \"Authorization\": \"Bearer \" + auth.token, \"Content-Type\": \"application/json\" }\r\n            )\r\n            history.push(`/tasks/${auth.userId}`)\r\n        } catch (err) {\r\n\r\n        }\r\n        // const enteredData = {\r\n        //     id: \"t4\",\r\n        //     title: enteredTask,\r\n        //     description: enteredDescription,\r\n        //     status: enteredStatus ? enteredStatus : \"Incomplete\",\r\n        //     createdAt: enteredCreatedAt,\r\n        //     owner: \"u1\"\r\n        // }\r\n        // props.onSaveTaskData(enteredData)\r\n        setEnteredTask(\"\")\r\n        setEnteredStatus(\"\")\r\n        setEnteredDescription(\"\")\r\n    }\r\n    const closeHandler = event => {\r\n        event.preventDefault()\r\n        history.push(`/tasks/${auth.userId}`)\r\n    }\r\n    return <div>\r\n        <ErrorModal error={error} onClear={clearError}></ErrorModal>\r\n        <div className={classes.main}>\r\n            {isLoading && <LoadingSpinner asOverlay></LoadingSpinner>}\r\n            <form onSubmit={submitHandler} className={classes.form}>\r\n                <p>Add a new task</p>\r\n                <label className={classes.req} htmlFor=\"taskName\">Task Name</label>\r\n                <input onChange={taskChangeHandler} value={enteredTask} id=\"taskName\" type=\"text\"></input>\r\n                <label className={classes.req} htmlFor=\"description\">Task Description</label>\r\n                <textarea onChange={descriptionChangeHandler} value={enteredDescription} id=\"description\" type=\"text\"></textarea>\r\n                <label htmlFor=\"status\">Task Status</label>\r\n                <select onChange={statusChangeHandler} value={enteredStatus} id=\"status\">\r\n                    <option value=\"Incomplete\">Incomplete</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"In Progress\">In Progress</option>\r\n                </select>\r\n                <button type=\"submit\">Add Task</button>\r\n                <button type=\"button\" onClick={closeHandler}>Cancel</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default NewTaskForm\r\n\r\n"],"sourceRoot":""}